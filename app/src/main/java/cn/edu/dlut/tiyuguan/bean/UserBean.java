package cn.edu.dlut.tiyuguan.bean;

import java.util.List;
import cn.edu.dlut.tiyuguan.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import cn.edu.dlut.tiyuguan.dao.OrderBeanDao;
import cn.edu.dlut.tiyuguan.dao.UserBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER_BEAN".
 */
public class UserBean {

    private String userName;
    /** Not-null value. */
    private String userId;
    private String userRole;
    private String creditWorthiness;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserBeanDao myDao;

    private List<OrderBean> orders;

    public UserBean() {
    }

    public UserBean(String userId) {
        this.userId = userId;
    }

    public UserBean(String userName, String userId, String userRole, String creditWorthiness) {
        this.userName = userName;
        this.userId = userId;
        this.userRole = userRole;
        this.creditWorthiness = creditWorthiness;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserBeanDao() : null;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    /** Not-null value. */
    public String getUserId() {
        return userId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getUserRole() {
        return userRole;
    }

    public void setUserRole(String userRole) {
        this.userRole = userRole;
    }

    public String getCreditWorthiness() {
        return creditWorthiness;
    }

    public void setCreditWorthiness(String creditWorthiness) {
        this.creditWorthiness = creditWorthiness;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<OrderBean> getOrders() {
        if (orders == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderBeanDao targetDao = daoSession.getOrderBeanDao();
            List<OrderBean> ordersNew = targetDao._queryUserBean_Orders(userId);
            synchronized (this) {
                if(orders == null) {
                    orders = ordersNew;
                }
            }
        }
        return orders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetOrders() {
        orders = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
