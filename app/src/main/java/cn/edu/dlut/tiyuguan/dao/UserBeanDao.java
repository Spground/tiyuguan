package cn.edu.dlut.tiyuguan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.edu.dlut.tiyuguan.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, String> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", false, "USER_NAME");
        public final static Property UserId = new Property(1, String.class, "userId", true, "USER_ID");
        public final static Property UserRole = new Property(2, String.class, "userRole", false, "USER_ROLE");
        public final static Property CreditWorthiness = new Property(3, String.class, "creditWorthiness", false, "CREDIT_WORTHINESS");
    };

    private DaoSession daoSession;


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"USER_NAME\" TEXT," + // 0: userName
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: userId
                "\"USER_ROLE\" TEXT," + // 2: userRole
                "\"CREDIT_WORTHINESS\" TEXT);"); // 3: creditWorthiness
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
        stmt.bindString(2, entity.getUserId());
 
        String userRole = entity.getUserRole();
        if (userRole != null) {
            stmt.bindString(3, userRole);
        }
 
        String creditWorthiness = entity.getCreditWorthiness();
        if (creditWorthiness != null) {
            stmt.bindString(4, creditWorthiness);
        }
    }

    @Override
    protected void attachEntity(UserBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userRole
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // creditWorthiness
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setUserRole(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreditWorthiness(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserBean entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
