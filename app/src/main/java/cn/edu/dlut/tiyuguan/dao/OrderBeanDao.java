package cn.edu.dlut.tiyuguan.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import cn.edu.dlut.tiyuguan.bean.OrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_BEAN".
*/
public class OrderBeanDao extends AbstractDao<OrderBean, String> {

    public static final String TABLENAME = "ORDER_BEAN";

    /**
     * Properties of entity OrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", true, "ORDER_ID");
        public final static Property StartTime = new Property(1, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(2, Long.class, "endTime", false, "END_TIME");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
    };

    private Query<OrderBean> userBean_OrdersQuery;

    public OrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public OrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_BEAN\" (" + //
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderId
                "\"START_TIME\" INTEGER," + // 1: startTime
                "\"END_TIME\" INTEGER," + // 2: endTime
                "\"USER_ID\" TEXT NOT NULL );"); // 3: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getOrderId());
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(3, endTime);
        }
        stmt.bindString(4, entity.getUserId());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderBean readEntity(Cursor cursor, int offset) {
        OrderBean entity = new OrderBean( //
            cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // endTime
            cursor.getString(offset + 3) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderBean entity, int offset) {
        entity.setOrderId(cursor.getString(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEndTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserId(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(OrderBean entity, long rowId) {
        return entity.getOrderId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(OrderBean entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of UserBean. */
    public List<OrderBean> _queryUserBean_Orders(String userId) {
        synchronized (this) {
            if (userBean_OrdersQuery == null) {
                QueryBuilder<OrderBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                userBean_OrdersQuery = queryBuilder.build();
            }
        }
        Query<OrderBean> query = userBean_OrdersQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
