package cn.edu.dlut.tiyuguan.bean;

import cn.edu.dlut.tiyuguan.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import cn.edu.dlut.tiyuguan.dao.OrderBeanDao;
import cn.edu.dlut.tiyuguan.dao.RemindBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "REMIND_BEAN".
 */
public class RemindBean {

    private Long id;
    private Long advanced;
    /** Not-null value. */
    private String orderId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RemindBeanDao myDao;

    private OrderBean orderBean;
    private String orderBean__resolvedKey;


    public RemindBean() {
    }

    public RemindBean(Long id) {
        this.id = id;
    }

    public RemindBean(Long id, Long advanced, String orderId) {
        this.id = id;
        this.advanced = advanced;
        this.orderId = orderId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRemindBeanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getAdvanced() {
        return advanced;
    }

    public void setAdvanced(Long advanced) {
        this.advanced = advanced;
    }

    /** Not-null value. */
    public String getOrderId() {
        return orderId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    /** To-one relationship, resolved on first access. */
    public OrderBean getOrderBean() {
        String __key = this.orderId;
        if (orderBean__resolvedKey == null || orderBean__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrderBeanDao targetDao = daoSession.getOrderBeanDao();
            OrderBean orderBeanNew = targetDao.load(__key);
            synchronized (this) {
                orderBean = orderBeanNew;
            	orderBean__resolvedKey = __key;
            }
        }
        return orderBean;
    }

    public void setOrderBean(OrderBean orderBean) {
        if (orderBean == null) {
            throw new DaoException("To-one property 'orderId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.orderBean = orderBean;
            orderId = orderBean.getOrderId();
            orderBean__resolvedKey = orderId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
